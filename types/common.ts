/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	FunctionFragment,
	Typed,
	EventFragment,
	ContractTransaction,
	ContractTransactionResponse,
	DeferredTopicFilter,
	EventLog,
	TransactionRequest,
	LogDescription
} from 'ethers';

/**
 * If the AbiType is 'modified' this maps the differences the devs made to the
 * codebase
 */
export type Modifiers = {
	eth: string;
	ether: string;
	lqty: string;
	lusd: string;
	trove: string;
};

export interface TypedDeferredTopicFilter<_TCEvent extends TypedContractEvent>
	extends DeferredTopicFilter {}

export interface TypedContractEvent<
	InputTuple extends Array<any> = any,
	OutputTuple extends Array<any> = any,
	OutputObject = any
> {
	(...args: Partial<InputTuple>): TypedDeferredTopicFilter<
		TypedContractEvent<InputTuple, OutputTuple, OutputObject>
	>;
	name: string;
	fragment: EventFragment;
	getFragment(...args: Partial<InputTuple>): EventFragment;
}

type __TypechainAOutputTuple<T> = T extends TypedContractEvent<
	infer _U,
	infer W
>
	? W
	: never;
type __TypechainOutputObject<T> = T extends TypedContractEvent<
	infer _U,
	infer _W,
	infer V
>
	? V
	: never;

export interface TypedEventLog<TCEvent extends TypedContractEvent>
	extends Omit<EventLog, 'args'> {
	args: __TypechainAOutputTuple<TCEvent> & __TypechainOutputObject<TCEvent>;
}

export interface TypedLogDescription<TCEvent extends TypedContractEvent>
	extends Omit<LogDescription, 'args'> {
	args: __TypechainAOutputTuple<TCEvent> & __TypechainOutputObject<TCEvent>;
}

export type TypedListener<TCEvent extends TypedContractEvent> = (
	...listenerArg: [
		...__TypechainAOutputTuple<TCEvent>,
		TypedEventLog<TCEvent>,
		...undefined[]
	]
) => void;

export type MinEthersFactory<C, ARGS> = {
	deploy(...a: ARGS[]): Promise<C>;
};

export type GetContractTypeFromFactory<F> = F extends MinEthersFactory<
	infer C,
	any
>
	? C
	: never;
export type GetARGsTypeFromFactory<F> = F extends MinEthersFactory<any, any>
	? Parameters<F['deploy']>
	: never;

export type StateMutability = 'nonpayable' | 'payable' | 'view';

export type BaseOverrides = Omit<TransactionRequest, 'to' | 'data'>;
export type NonPayableOverrides = Omit<
	BaseOverrides,
	'value' | 'blockTag' | 'enableCcipRead'
>;
export type PayableOverrides = Omit<
	BaseOverrides,
	'blockTag' | 'enableCcipRead'
>;
export type ViewOverrides = Omit<TransactionRequest, 'to' | 'data'>;
export type Overrides<S extends StateMutability> = S extends 'nonpayable'
	? NonPayableOverrides
	: S extends 'payable'
	? PayableOverrides
	: ViewOverrides;

export type PostfixOverrides<A extends Array<any>, S extends StateMutability> =
	| A
	| [...A, Overrides<S>];
export type ContractMethodArgs<
	A extends Array<any>,
	S extends StateMutability
> = PostfixOverrides<{ [I in keyof A]-?: A[I] | Typed }, S>;

export type DefaultReturnType<R> = R extends Array<any> ? R[0] : R;

// export interface ContractMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = R | ContractTransactionResponse> {
export interface TypedContractMethod<
	A extends Array<any> = Array<any>,
	R = any,
	S extends StateMutability = 'payable'
> {
	(...args: ContractMethodArgs<A, S>): S extends 'view'
		? Promise<DefaultReturnType<R>>
		: Promise<ContractTransactionResponse>;

	name: string;

	fragment: FunctionFragment;

	getFragment(...args: ContractMethodArgs<A, S>): FunctionFragment;

	populateTransaction(
		...args: ContractMethodArgs<A, S>
	): Promise<ContractTransaction>;
	staticCall(
		...args: ContractMethodArgs<A, 'view'>
	): Promise<DefaultReturnType<R>>;
	send(
		...args: ContractMethodArgs<A, S>
	): Promise<ContractTransactionResponse>;
	estimateGas(...args: ContractMethodArgs<A, S>): Promise<bigint>;
	staticCallResult(...args: ContractMethodArgs<A, 'view'>): Promise<R>;
}

/**
 * @description Replaces any instance of the words eth, ether, lqty, lusd,
 * and trove with the protocols rebranded names
 * @param part The segment of the data to digest
 * @param modifiers The rebranded names for the abi
 */
export function modifyAbi(part: any, modifiers: Modifiers): any {
	if (Array.isArray(part)) {
		return part.map(element => modifyAbi(element, modifiers));
	} else if (part && typeof part === 'object') {
		const result = { ...part };

		for (const [abiKey, abiVal] of Object.entries(part)) {
			if (
				abiKey === 'name' &&
				typeof abiVal === 'string' &&
				isModifiable(abiVal)
			) {
				let modAbiVal = abiVal;
				const lowerAbiName = abiVal.toLowerCase();

				for (const [standard, custom] of Object.entries(modifiers)) {
					if (lowerAbiName.includes(standard)) {
						const regex = new RegExp(`\\b$${standard}\\b`, 'gi');

						modAbiVal = modAbiVal.replace(regex, original =>
							matchCasing(standard, custom, original)
						);
					}
				}

				result[abiKey] = modAbiVal;
			} else {
				result[abiKey] = modifyAbi(abiVal, modifiers);
			}
		}

		return result;
	}

	return part;
	
	/**
	 * @description Returns true if the string contains a modifiable value
	 * @param abiVal The value to check
	 */
	function isModifiable(abiVal: string): boolean {
		const mods = ['eth', 'ether', 'lqty', 'lusd', 'trove'];
		const lowerVal = abiVal.toLowerCase();
	
		return mods.some(mod => lowerVal.includes(mod));
	}
	
	/**
	 * @description Adjusts casing of 'custom' to match the 'standard' in
	 * the original string
	 * @param standard The standard liquity name
	 * @param custom The rebranded name
	 * @param original The original string maintaining capitalization
	 */
	function matchCasing(
		standard: string,
		custom: string,
		original: string
	): string {
		if (original === standard.toUpperCase()) return custom.toUpperCase();
	
		if (original === standard.charAt(0).toUpperCase() + standard.slice(1))
			return custom.charAt(0).toUpperCase() + custom.slice(1);
	
		return custom;
	}
}